{
  "Comment": "State machine for cleaning and validating CQC data",
  "StartAt": "Clean And Validate CQC Data",
  "States": {
    "Clean And Validate CQC Data": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Clean CQC Provider Data",
          "States": {
            "Clean CQC Provider Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_cqc_provider_data_job_name}",
                "Arguments": {
                  "--cqc_provider_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=full_providers_api/version=3.0.0/",
                  "--cqc_provider_cleaned": "${dataset_bucket_uri}/domain=CQC_delta/dataset=full_providers_api_cleaned/"
                }
              },
              "Next": "Validate Providers Cleaned"
            },
            "Validate Providers Cleaned": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_providers_api_cleaned_data_job_name}",
                "Arguments": {
                  "--raw_cqc_provider_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=full_providers_api/version=3.0.0/",
                  "--cleaned_cqc_providers_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=full_providers_api_cleaned/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=data_quality_report_delta_providers_api_cleaned/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Set Flatten Delta CQC Locations Parameters",
          "States": {
            "Set Flatten Delta CQC Locations Parameters": {
              "Type": "Pass",
              "Result": {
                "script": "cqc_locations_2_flatten.py",
                "cqc_source_arg_name": "--cqc_locations_api_delta_source",
                "cqc_source_arg_location": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_locations_api/version=3.0.0",
                "cqc_destination_arg_name": "--cqc_locations_flattened_destination",
                "cqc_destination_arg_location": "${dataset_bucket_uri}/domain=CQC_delta/dataset=cqc_locations_02_delta_flattened/"
              },
              "Next": "Flatten Delta CQC Locations"
            },
            "Flatten Delta CQC Locations": {
              "Type": "Task",
              "Resource": "arn:aws:states:::ecs:runTask.sync",
              "Parameters": {
                "Cluster": "${polars_cluster_arn}",
                "TaskDefinition": "${cqc_api_task_arn}",
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                  "AwsvpcConfiguration": {
                    "Subnets": ${public_subnet_ids},
                    "SecurityGroups": ["${cqc_api_security_group_id}"],
                    "AssignPublicIp": "ENABLED"
                  }
                },
                "Overrides": {
                  "ContainerOverrides": [
                    {
                      "Name": "cqc-api-container",
                      "Command.$": "States.Array($.script, $.cqc_source_arg_name, $.cqc_source_arg_location, $.cqc_destination_arg_name, $.cqc_destination_arg_location)"
                    }
                  ]
                }
              },
              "ResultPath": "$.flattenedLocationResult",
              "Next": "(placeholder) Build, Clean and Validate Locations"
            },
            "(placeholder) Build, Clean and Validate Locations": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "(placeholder) Build Full CQC Locations",
                  "States": {
                    "(placeholder) Build Full CQC Locations": {
                      "Type": "Pass",
                      "Result": "Placeholder for Build Full CQC Locations",
                      "Next": "(placeholder) Clean Full CQC Locations"
                    },
                    "(placeholder) Clean Full CQC Locations": {
                      "Type": "Pass",
                      "Result": "Placeholder for Build Full CQC Locations",
                      "Next": "(placeholder) Validate Full CQC Locations"
                    },
                    "(placeholder) Validate Full CQC Locations": {
                      "Type": "Pass",
                      "Result": "Placeholder for Validate Full CQC Locations",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "(placeholder) Validate Flatten Delta CQC Locations",
                  "States": {
                    "(placeholder) Validate Flatten Delta CQC Locations": {
                      "Type": "Pass",
                      "Result": "Placeholder for Validate Flatten Delta CQC Locations",
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Next": "Handle Error and Run Crawler",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error",
          "Next": "Handle Error and Run Crawler"
        }
      ]
    },
    "Handle Error and Run Crawler": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Check if Error Exists",
          "States": {
            "Check if Error Exists": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.error",
                  "IsPresent": true,
                  "Next": "Publish Error Notification"
                }
              ],
              "Default": "No Error"
            },
            "Publish Error Notification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${pipeline_failure_lambda_function_arn}:$LATEST",
                "Payload": {
                  "Error.$": "$.error.Cause",
                  "ExecutionId.$": "$$.Execution.Id",
                  "StateMachineName.$": "$$.StateMachine.Name",
                  "StateMachineId.$": "$$.StateMachine.Id",
                  "ExecutionStartTime.$": "$$.Execution.StartTime",
                  "CallbackToken.$": "$$.Task.Token"
                }
              },
              "Next": "Fail"
            },
            "No Error": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Run CQC Crawler",
          "States": {
            "Run CQC Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "${cqc_crawler_delta_name}"
              },
              "End": true
            }
          }
        }
      ],
      "End": true
    }
  }
}
