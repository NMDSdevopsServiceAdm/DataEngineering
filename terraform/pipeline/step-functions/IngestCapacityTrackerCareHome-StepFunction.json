{
  "Comment": "A step function to ingest, clean and validate Capacity Tracker Care Home data",
  "StartAt": "Capacity Tracker Care Home pipeline",
  "States": {
    "Capacity Tracker Care Home pipeline": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Ingest Capacity Tracker Care Home",
          "States": {
            "Ingest Capacity Tracker Care Home": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${ingest_ct_care_home_job_name}",
                "Arguments": {
                  "--source.$": "$.jobs.ingest_capacity_tracker_data.source",
                  "--destination": "${dataset_bucket_uri}/domain=capacity_tracker/dataset=capacity_tracker_care_home/"
                }
              },
              "Next": "Clean Capacity Tracker Care Home data"
            },
            "Clean Capacity Tracker Care Home data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_ct_care_home_data_job_name}",
                "Arguments": {
                  "--capacity_tracker_care_home_source": "${dataset_bucket_uri}/domain=capacity_tracker/dataset=capacity_tracker_care_home/",
                  "--cleaned_capacity_tracker_care_home_destination": "${dataset_bucket_uri}/domain=capacity_tracker/dataset=capacity_tracker_care_home_cleaned/"
                }
              },
              "Next": "Validate cleaned CT Care Home data"
            },
            "Validate cleaned CT Care Home data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_ct_care_home_cleaned_data_job_name}",
                "Arguments": {
                  "--capacity_tracker_care_home_source": "${dataset_bucket_uri}/domain=capacity_tracker/dataset=capacity_tracker_care_home/",
                  "--capacity_tracker_care_home_cleaned_source": "${dataset_bucket_uri}/domain=capacity_tracker/dataset=capacity_tracker_care_home_cleaned/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=data_quality_report_capacity_tracker_care_home_cleaned_data/"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Run Crawler and Handle Error",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Run Crawler and Handle Error",
          "ResultPath": "$.error"
        }
      ]
    },
    "Run Crawler and Handle Error": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Run CT Crawler",
          "States": {
            "Run CT Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "${run_crawler_state_machine_arn}",
                "Input": {
                  "crawler_name": "${ct_crawler_name}",
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Check if Error Exists",
          "States": {
            "Check if Error Exists": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.error",
                  "IsPresent": true,
                  "Next": "Publish Error Notification"
                }
              ],
              "Default": "No Error"
            },
            "No Error": {
              "Type": "Succeed"
            },
            "Publish Error Notification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${pipeline_failure_lambda_function_arn}:$LATEST",
                "Payload": {
                  "Error.$": "$.error.Cause",
                  "ExecutionId.$": "$$.Execution.Id",
                  "StateMachineName.$": "$$.StateMachine.Name",
                  "StateMachineId.$": "$$.StateMachine.Id",
                  "ExecutionStartTime.$": "$$.Execution.StartTime",
                  "CallbackToken.$": "$$.Task.Token"
                }
              },
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
