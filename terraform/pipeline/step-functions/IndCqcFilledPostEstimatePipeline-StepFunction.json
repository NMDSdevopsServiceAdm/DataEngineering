{
  "Comment": "A state machine indicating the transformation steps from Bronze -> Silver -> Gold data layers, as divided by the stages",
  "StartAt": "Bronze to Silver Transformation Layer",
  "States": {
    "Bronze to Silver Transformation Layer": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Run clean ascwds workplace data job",
          "States": {
            "Run clean ascwds workplace data job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_ascwds_workplace_job_name}",
                "Arguments": {
                  "--ascwds_workplace_source": "${dataset_bucket_uri}/domain=ASCWDS/dataset=workplace/",
                  "--cleaned_ascwds_workplace_destination": "${dataset_bucket_uri}/domain=ASCWDS/dataset=workplace_cleaned/",
                  "--workplace_for_reconciliation_destination": "${dataset_bucket_uri}/domain=SfC/dataset=sfc_workplace_for_reconciliation/"
                }
              },
              "Next": "Clean ASCWDS worker and SfC Reconciliation Parallel"
            },
            "Clean ASCWDS worker and SfC Reconciliation Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Run clean ascwds worker data job",
                  "States": {
                    "Run clean ascwds worker data job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${clean_ascwds_worker_job_name}",
                        "Arguments": {
                          "--ascwds_worker_source": "${dataset_bucket_uri}/domain=ASCWDS/dataset=worker/",
                          "--ascwds_workplace_cleaned_source": "${dataset_bucket_uri}/domain=ASCWDS/dataset=workplace_cleaned/",
                          "--ascwds_worker_destination": "${dataset_bucket_uri}/domain=ASCWDS/dataset=worker_cleaned/"
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Run reconciliation job",
                  "States": {
                    "Run reconciliation job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${reconciliation_job_name}",
                        "Arguments": {
                          "--cqc_location_api_source": "${dataset_bucket_uri}/domain=CQC/dataset=locations_api/version=2.1.0/",
                          "--ascwds_reconciliation_source": "${dataset_bucket_uri}/domain=SfC/dataset=sfc_workplace_for_reconciliation/",
                          "--reconciliation_single_and_subs_destination": "${dataset_bucket_uri}/domain=SfC/dataset=reconciliation/singles_and_subs",
                          "--reconciliation_parents_destination": "${dataset_bucket_uri}/domain=SfC/dataset=reconciliation/parents"
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Run clean pir data job",
          "States": {
            "Run clean pir data job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_cqc_pir_data_job_name}",
                "Arguments": {
                  "--cqc_pir_source": "${dataset_bucket_uri}/domain=CQC/dataset=pir/",
                  "--cleaned_cqc_pir_destination": "${dataset_bucket_uri}/domain=CQC/dataset=pir_cleaned/"
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Clean ONS and Clean CQC Provider Parallel",
          "States": {
            "Clean ONS and Clean CQC Provider Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Run clean ons data job",
                  "States": {
                    "Run clean ons data job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${clean_ons_data_job_name}",
                        "Arguments": {
                          "--ons_source": "${dataset_bucket_uri}/domain=ONS/dataset=postcode_directory/",
                          "--cleaned_ons_destination": "${dataset_bucket_uri}/domain=ONS/dataset=postcode_directory_cleaned/"
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Run clean cqc provider data job",
                  "States": {
                    "Run clean cqc provider data job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${clean_cqc_provider_data_job_name}",
                        "Arguments": {
                          "--cqc_provider_source": "${dataset_bucket_uri}/domain=CQC/dataset=providers_api/version=2.0.0/",
                          "--cqc_provider_cleaned": "${dataset_bucket_uri}/domain=CQC/dataset=providers_api_cleaned/"
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Run clean cqc locations data job"
            },
            "Run clean cqc locations data job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_cqc_location_data_job_name}",
                "Arguments": {
                  "--cqc_location_source": "${dataset_bucket_uri}/domain=CQC/dataset=locations_api/version=2.1.0",
                  "--cleaned_cqc_provider_source": "${dataset_bucket_uri}/domain=CQC/dataset=providers_api_cleaned/",
                  "--cleaned_ons_postcode_directory_source": "${dataset_bucket_uri}/domain=ONS/dataset=postcode_directory_cleaned/",
                  "--cleaned_cqc_location_destination": "${dataset_bucket_uri}/domain=CQC/dataset=locations_api_cleaned/"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Start silver validation",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Publish error notification",
          "ResultPath": "$.error"
        }
      ]
    },
    "Start silver validation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${run_silver_validation_state_machine_arn}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
        }
      },
      "Next": "Silver to Gold Transformation Layer",
      "Comment": "A state that fully encapsulates taking data from the Bronze layer and performing ETL operations to move it to the Silver layer",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Publish error notification",
          "ResultPath": "$.error"
        }
      ]
    },
    "Silver to Gold Transformation Layer": {
      "Type": "Parallel",
      "Next": "Success",
      "Branches": [
        {
          "StartAt": "Run merge ind cqc data job",
          "States": {
            "Run merge ind cqc data job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${merge_ind_cqc_data_job_name}",
                "Arguments": {
                  "--cleaned_cqc_location_source": "${dataset_bucket_uri}/domain=CQC/dataset=locations_api_cleaned/",
                  "--cleaned_cqc_pir_source": "${dataset_bucket_uri}/domain=CQC/dataset=pir_cleaned/",
                  "--cleaned_ascwds_workplace_source": "${dataset_bucket_uri}/domain=ASCWDS/dataset=workplace_cleaned/",
                  "--destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_merged_data/"
                }
              },
              "Next": "Run clean ind cqc data job"
            },
            "Run clean ind cqc data job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${clean_ind_cqc_filled_posts_job_name}",
                "Arguments": {
                  "--merged_ind_cqc_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_merged_data/",
                  "--cleaned_ind_cqc_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_cleaned_data/"
                }
              },
              "Next": "Run estimate missing ascwds ind cqc filled posts job"
            },
            "Run estimate missing ascwds ind cqc filled posts job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${estimate_missing_ascwds_ind_cqc_filled_posts_job_name}",
                "Arguments": {
                  "--cleaned_ind_cqc_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_cleaned_data/",
                  "--estimated_missing_ascwds_ind_cqc_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_missing_ascwds_filled_posts/"
                }
              },
              "Next": "Feature engineering"
            },
            "Feature engineering": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Run care home features job",
                  "States": {
                    "Run care home features job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${prepare_features_care_home_ind_cqc_job_name}",
                        "Arguments": {
                          "--ind_cqc_filled_posts_cleaned_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_missing_ascwds_filled_posts/",
                          "--care_home_ind_cqc_features_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_care_home/"
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Run non res ascwds features job",
                  "States": {
                    "Run non res ascwds features job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${prepare_features_non_res_ascwds_ind_cqc_job_name}",
                        "Arguments": {
                          "--ind_cqc_filled_posts_cleaned_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_missing_ascwds_filled_posts/",
                          "--non_res_ascwds_inc_dormancy_ind_cqc_features_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_ascwds_inc_dormancy/",
                          "--non_res_ascwds_without_dormancy_ind_cqc_features_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_ascwds_without_dormancy/"
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Run non res pir features job",
                  "States": {
                    "Run non res pir features job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${prepare_features_non_res_pir_ind_cqc_job_name}",
                        "Arguments": {
                          "--ind_cqc_cleaned_data_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_missing_ascwds_filled_posts/",
                          "--non_res_pir_ind_cqc_features_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_pir/"
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Run estimate ind cqc filled posts job"
            },
            "Run estimate ind cqc filled posts job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${estimate_ind_cqc_filled_posts_job_name}",
                "Arguments": {
                  "--estimate_missing_ascwds_filled_posts_data_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_missing_ascwds_filled_posts/",
                  "--care_home_features_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_care_home/",
                  "--care_home_model_source": "${pipeline_resources_bucket_uri}/models/care_home_filled_posts_prediction/4.0.1/",
                  "--non_res_with_dormancy_features_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_ascwds_inc_dormancy/",
                  "--non_res_with_dormancy_model_source": "${pipeline_resources_bucket_uri}/models/non_residential_with_dormancy_prediction/2.0.1/",
                  "--non_res_without_dormancy_features_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_ascwds_without_dormancy/",
                  "--non_res_without_dormancy_model_source": "${pipeline_resources_bucket_uri}/models/non_residential_without_dormancy_prediction/2.0.0/",
                  "--non_res_pir_linear_regression_features_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_features_non_res_pir/",
                  "--non_res_pir_linear_regression_model_source": "${pipeline_resources_bucket_uri}/models/non_res_pir_linear_regression_prediction/1.0.0/",
                  "--estimated_ind_cqc_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts/",
                  "--ml_model_metrics_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_ml_model_metrics/"
                }
              },
              "Next": "Run estimate ind cqc filled posts by job role job"
            },
            "Run estimate ind cqc filled posts by job role job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${estimate_ind_cqc_filled_posts_by_job_role_job_name}",
                "Arguments": {
                  "--estimated_ind_cqc_filled_posts_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts/",
                  "--cleaned_ascwds_worker_source": "${dataset_bucket_uri}/domain=ASCWDS/dataset=worker_cleaned/",
                  "--estimated_ind_cqc_filled_posts_by_job_role_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts_by_job_role/"
                }
              },
              "Next": "Run diagnostics on known filled posts job"
            },
            "Run diagnostics on known filled posts job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${diagnostics_on_known_filled_posts_job_name}",
                "Arguments": {
                  "--estimate_filled_posts_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts/",
                  "--diagnostics_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts_diagnostics/",
                  "--summary_diagnostics_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts_diagnostics_summary/",
                  "--charts_destination": "${dataset_bucket_name}"
                }
              },
              "Next": "Start gold validation"
              },
              "Start gold validation": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution.sync:2",
                "Parameters": {
                  "StateMachineArn": "${run_gold_validation_state_machine_arn}",
                  "Input": {
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                  }
                },
                "Next": "Run archive filled posts estimates"
              },
              "Run archive filled posts estimates": {
                "Type": "Task",
                "Resource": "arn:aws:states:::glue:startJobRun.sync",
                "Parameters": {
                  "JobName": "${archive_filled_posts_estimates_job_name}",
                  "Arguments": {
                    "--estimate_ind_cqc_filled_posts_source": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=ind_cqc_estimated_filled_posts/",
                    "--monthly_filled_posts_archive_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=archived_monthly_filled_posts/",
                    "--annual_filled_posts_archive_destination": "${dataset_bucket_uri}/domain=ind_cqc_filled_posts/dataset=archived_annual_filled_posts/"
                  }
                },
                "Next": "run ind crawler"
              },
              "run ind crawler": {
                "Type": "Task",
                "Parameters": {
                  "Name": "${ind_cqc_filled_posts_crawler_name}"
                },
                "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
                "End": true
              }
            }
          },
          {
            "StartAt": "Trigger coverage pipeline",
            "States": {
              "Trigger coverage pipeline": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution",
                "Parameters": {
                  "StateMachineArn": "${trigger_coverage_state_machine_arn}",
                  "Input": {
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                  }
                },
                "End": true
              }
            }
          },
        {
          "StartAt": "Run ons crawler",
          "States": {
            "Run ons crawler": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "Name": "${ons_crawler_name}"
              },
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler"
            }
          }
        },
        {
          "StartAt": "Run cqc crawler",
          "States": {
            "Run cqc crawler": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "Name": "${cqc_crawler_name}"
              },
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler"
            }
          }
        }
      ],
      "Comment": "A state that fully encapsulates taking data from the Silver layer and performing ETL operations to move it to the Gold layer",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Publish error notification",
          "ResultPath": "$.error"
        }
      ]
    },
    "Publish error notification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${pipeline_failure_lambda_function_arn}:$LATEST",
        "Payload": {
          "Error.$": "$.error.Cause",
          "ExecutionId.$": "$$.Execution.Id",
          "StateMachineName.$": "$$.StateMachine.Name",
          "StateMachineId.$": "$$.StateMachine.Id",
          "ExecutionStartTime.$": "$$.Execution.StartTime",
          "CallbackToken.$": "$$.Task.Token"
        }
      },
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}