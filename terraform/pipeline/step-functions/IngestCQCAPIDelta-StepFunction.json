{
  "Comment": "State machine for CQC API ingestion data pipeline",
  "StartAt": "CqcIngest",
  "States": {
    "CqcIngest": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "GetProvidersJobRuns",
          "States": {
            "GetProvidersJobRuns": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:getJobRuns",
              "Parameters": {
                "JobName": "${delta_cqc_providers_download_job_name}"
              },
              "Next": "GetLastProvidersRun"
            },
            "GetLastProvidersRun": {
              "Type": "Pass",
              "InputPath": "$.JobRuns[?(@.JobRunState=='SUCCEEDED')].StartedOn",
              "Assign": {
                "startDate.$": "States.ArrayGetItem($, 0)"
              },
              "Next": "RunDeltaCqcProvidersDownloadJob"
            },
            "RunDeltaCqcProvidersDownloadJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${delta_cqc_providers_download_job_name}",
                "Arguments": {
                  "--destination_prefix": "${dataset_bucket_uri}",
                  "--start_timestamp.$": "$startDate",
                  "--end_timestamp.$": "$$.State.EnteredTime",
                  "--additional-python-modules": "ratelimit==2.2.1,"
                }
              },
              "Next": "ValidateProvidersApiRaw"
            },
            "ValidateProvidersApiRaw": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_providers_api_raw_delta_data_job_name}",
                "Arguments": {
                  "--raw_cqc_provider_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_providers_api/version=3.0.0/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=delta_providers_api_raw/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "GetLocationsJobRuns",
          "States": {
            "GetLocationsJobRuns": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:getJobRuns",
              "Parameters": {
                "JobName": "${delta_cqc_locations_download_job_name}"
              },
              "Next": "GetLastLocationsRun"
            },
            "GetLastLocationsRun": {
              "Type": "Pass",
              "InputPath": "$.JobRuns[?(@.JobRunState=='SUCCEEDED')].StartedOn",
              "Assign": {
                "startDate.$": "States.ArrayGetItem($, 0)"
              },
              "Next": "RunDeltaCqcLocationsDownloadJob"
            },
            "RunDeltaCqcLocationsDownloadJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${delta_cqc_locations_download_job_name}",
                "Arguments": {
                  "--destination_prefix": "${dataset_bucket_uri}",
                  "--start_timestamp.$": "$startDate",
                  "--end_timestamp.$": "$$.State.EnteredTime",
                  "--additional-python-modules": "ratelimit==2.2.1,"
                }
              },
              "Next": "ValidateLocationsApiRaw"
            },
            "ValidateLocationsApiRaw": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_locations_api_raw_delta_data_job_name}",
                "Arguments": {
                  "--raw_cqc_location_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_locations_api/version=3.0.0/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=delta_locations_api_raw/"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "CrawlCqcWhenSuccessful",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "PublishErrorNotification",
          "ResultPath": "$.error"
        }
      ]
    },
    "CrawlCqcWhenSuccessful": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "${cqc_crawler_name}"
      },
      "Next": "CrawlValidationWhenSuccessful"
    },
    "CrawlValidationWhenSuccessful": {
      "Type": "Task",
      "Parameters": {
        "Name": "${data_validation_reports_crawler_name}"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "PublishErrorNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${pipeline_failure_lambda_function_arn}:$LATEST",
        "Payload": {
          "Error.$": "$.error.Cause",
          "ExecutionId.$": "$$.Execution.Id",
          "StateMachineName.$": "$$.StateMachine.Name",
          "StateMachineId.$": "$$.StateMachine.Id",
          "ExecutionStartTime.$": "$$.Execution.StartTime",
          "CallbackToken.$": "$$.Task.Token"
        }
      },
      "Next": "CrawlCqcWhenFailed"
    },
    "CrawlCqcWhenFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "${cqc_crawler_name}"
      },
      "Next": "CrawlValidationWhenFailed"
    },
    "CrawlValidationWhenFailed": {
      "Type": "Task",
      "Parameters": {
        "Name": "${data_validation_reports_crawler_name}"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
