{
  "Comment": "State machine for CQC API ingestion data pipeline",
  "StartAt": "CqcIngest",
  "States": {
    "CqcIngest": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "ReadLastProvidersRun",
          "States": {
            "ReadLastProvidersRun": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "Parameters": {
                "Name": "${last_providers_run_param_name}"
              },
              "ResultSelector": {
                "startDate.$": "$.Parameter.Value"
              },
              "Next": "RunDeltaCqcProvidersDownloadJob"
            },
            "RunDeltaCqcProvidersDownloadJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${delta_cqc_providers_download_job_name}",
                "Arguments": {
                  "--destination_prefix": "${dataset_bucket_uri}",
                  "--start_timestamp.$": "$.startDate",
                  "--end_timestamp.$": "$$.State.EnteredTime",
                  "--additional-python-modules": "ratelimit==2.2.1,"
                }
              },
              "ResultSelector": {
                "endDate.$": "$$.State.EnteredTime"
              },
              "ResultPath": "$.providerResult",
              "Next": "WriteLastProvidersRun"
            },
            "WriteLastProvidersRun": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
              "Parameters": {
                "Name": "${last_providers_run_param_name}",
                "Value.$": "$.providerResult.endDate",
                "Overwrite": true,
                "Type": "String"
              },
              "Next": "ValidateProvidersApiRaw"
            },
            "ValidateProvidersApiRaw": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_providers_api_raw_delta_data_job_name}",
                "Arguments": {
                  "--raw_cqc_provider_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_providers_api/version=3.0.0/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=delta_providers_api_raw/"
                }
              },
              "Next": "BuildProvidersDataset"
            },
            "BuildProvidersDataset": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${create_snapshot_lambda_lambda_arn}:$LATEST",
                "Payload": {
                  "organisation_type": "providers",
                  "input_uri": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_providers_api/version=3.0.0/",
                  "output_uri.$": "States.Format('${dataset_bucket_uri}/domain=CQC_delta/dataset=full_providers_api/version=3.0.0/year={}/month={}/day={}/', States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 0), States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 1), States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 2))",
                  "snapshot_date.$": "$$.State.EnteredTime"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "ReadLastLocationsRun",
          "States": {
            "ReadLastLocationsRun": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "Parameters": {
                "Name": "${last_locations_run_param_name}"
              },
              "ResultSelector": {
                "startDate.$": "$.Parameter.Value"
              },
              "Next": "RunDeltaCqcLocationsDownloadJob"
            },
            "RunDeltaCqcLocationsDownloadJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${delta_cqc_locations_download_job_name}",
                "Arguments": {
                  "--destination_prefix": "${dataset_bucket_uri}",
                  "--start_timestamp.$": "$.startDate",
                  "--end_timestamp.$": "$$.State.EnteredTime",
                  "--additional-python-modules": "ratelimit==2.2.1,"
                }
              },
              "ResultSelector": {
                "endDate.$": "$$.State.EnteredTime"
              },
              "ResultPath": "$.locationResult",
              "Next": "WriteLastLocationsRun"
            },
            "WriteLastLocationsRun": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
              "Parameters": {
                "Name": "${last_locations_run_param_name}",
                "Value.$": "$.locationResult.endDate",
                "Overwrite": true,
                "Type": "String"
              },
              "Next": "ValidateLocationsApiRaw"
            },
            "ValidateLocationsApiRaw": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${validate_locations_api_raw_delta_data_job_name}",
                "Arguments": {
                  "--raw_cqc_location_source": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_locations_api/version=3.0.0/",
                  "--report_destination": "${dataset_bucket_uri}/domain=data_validation_reports/dataset=delta_locations_api_raw/"
                }
              },
              "Next": "BuildLocationsDataset"
            },
            "BuildLocationsDataset": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${create_snapshot_lambda_lambda_arn}:$LATEST",
                "Payload": {
                  "organisation_type": "locations",
                  "input_uri": "${dataset_bucket_uri}/domain=CQC_delta/dataset=delta_locations_api/version=3.0.0/",
                  "output_uri.$": "States.Format('${dataset_bucket_uri}/domain=CQC_delta/dataset=full_locations_api/version=3.0.0/year={}/month={}/day={}/', States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 0), States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 1), States.ArrayGetItem(States.StringSplit($$.State.EnteredTime, '-,T'), 2))",
                  "snapshot_date.$": "$$.State.EnteredTime"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "RunCqcCrawler"
        }
      ],
      "Next": "RunCqcCrawler"
    },
    "RunCqcCrawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "${cqc_crawler_name}"
      },
      "Next": "RunValidationCrawler"
    },
    "RunValidationCrawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "${data_validation_reports_crawler_name}"
      },
      "Next": "CheckForErrors"
    },
    "CheckForErrors": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.error",
          "IsPresent": true,
          "Next": "PublishErrorNotification"
        }
      ],
      "Default": "Success"
    },
    "PublishErrorNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${pipeline_failure_lambda_function_arn}:$LATEST",
        "Payload": {
          "Error.$": "$.error.Cause",
          "ExecutionId.$": "$$.Execution.Id",
          "StateMachineName.$": "$$.StateMachine.Name",
          "StateMachineId.$": "$$.StateMachine.Id",
          "ExecutionStartTime.$": "$$.Execution.StartTime",
          "CallbackToken.$": "$$.Task.Token"
        }
      },
      "Next": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
