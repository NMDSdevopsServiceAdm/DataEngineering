version: 2.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

orbs:
  aws-s3: circleci/aws-s3@3.0

jobs:
  test:
    docker:
      - image: circleci/python:3.9.6
    resource_class: small

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1.1-deps-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install system packages
          command: |
            sudo apt-get update
            sudo apt-get install -y default-jre-headless

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install --dev

      - save_cache:
          key: v1.1-deps-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs

      - run:
          name: run unit tests
          command: |
            pipenv run python -m unittest discover tests/unit

      - run:
          name: run integration tests
          command: |
            pipenv run python -m unittest discover tests/integration
  lint-python:
    docker:
      - image: circleci/python:3.9.6
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install black
          command: pip install black==22.12.0
      - run:
          name: Check Python fomatting
          command: black . --check

  lint-terraform:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:1.2.1
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check terraform fomatting
          command: terraform fmt -check -recursive -diff


  terraform-plan:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:1.2.1
    resource_class: small
    steps:
      - checkout
      - run:
          name: terraform plan
          command: |
            cd terraform/pipeline
            terraform init -input=false
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan -out tfapply
      - store_artifacts:
          path: terraform/pipeline/tfapply
      - persist_to_workspace:
          root: .
          paths:
            - terraform/pipeline/tfapply
            - terraform/pipeline/.*
            - .

  terraform-plan-dev:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:1.2.1
    resource_class: small
    steps:
      - checkout
      - run:
          name: terraform plan
          command: |
            cd terraform/pipeline
            terraform init -input=false
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new "DEV-${CIRCLE_BRANCH}"
            terraform plan -out tfapply
      - store_artifacts:
          path: terraform/pipeline/tfapply
      - persist_to_workspace:
          root: .
          paths:
            - terraform/pipeline/tfapply
            - terraform/pipeline/.*
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:1.2.1
    resource_class: small
    steps:
      - attach_workspace:
          at: .
          
      - run:
          name: terraform apply
          command: |
            cd terraform/pipeline
            terraform apply -auto-approve tfapply
      - run:
          name: save pipeline resources bucket name
          command: |
            cd terraform/pipeline
            echo $(terraform output --raw pipeline_resources_bucket_name) > pipeline_resources_bucket_name

      - persist_to_workspace:
          root: .
          paths: ./terraform/pipeline/pipeline_resources_bucket_name
  
  deploy-dependencies:
    docker:
      - image: circleci/python:3.9.6
    resource_class: small
    steps:
      - attach_workspace:
          at: .

      - run:
          name: package utils, schemas and environment
          command: |
            mkdir dependencies && zip -r dependencies/dependencies.zip utils schemas environment

      - run:
          name: Download Deequ jar
          command: |
            wget https://repo1.maven.org/maven2/com/amazon/deequ/deequ/1.0.3/deequ-1.0.3.jar -O dependencies/deequ-1.0.3.jar

      - run:
          name: Package PyDeequ
          command: |
            pip install -t ./target pydeequ==1.0.1
            cd target && zip -r pydeequ-1.0.1.zip pydeequ && cd ..
            mv target/pydeequ-1.0.1.zip dependencies/pydeequ-1.0.1.zip
            rm -rf target

      - aws-s3/sync:
          aws-region: AWS_REGION
          from: dependencies
          to: "s3://$(cat terraform/pipeline/pipeline_resources_bucket_name)/dependencies"

  terraform-destroy:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:1.2.1
    resource_class: small
    steps:
      - checkout
      - run:
          name: terraform destroy
          command: |
            cd terraform/pipeline
            terraform init -input=false
            terraform workspace select << pipeline.parameters.GHA_Meta >>
            terraform destroy -auto-approve
      - run:
          name: delete workspace
          command: |
            cd terraform/pipeline
            terraform workspace select default
            terraform workspace delete << pipeline.parameters.GHA_Meta >>

workflows:
  version: 2
  test-plan-approve-and-deploy-to-main:
    unless: << pipeline.parameters.GHA_Action >>
    jobs:
      - test:
          filters:
            branches:
              only: main
      - terraform-plan:
          requires:
            - test
      - plan-approval:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
          requires:
            - plan-approval
      - deploy-dependencies:
          requires:
            - terraform-apply

  
  test-plan-and-deploy-to-dev:
    unless: << pipeline.parameters.GHA_Action >>
    jobs:
      - test:
          filters:
            branches:
              ignore: main
      - lint-python:
          filters:
            branches:
              ignore: main
      - lint-terraform:
          filters:
            branches:
              ignore: main
      - terraform-plan-dev:
          requires:
            - test
      - terraform-apply:
          requires:
            - terraform-plan-dev
      - deploy-dependencies:
          requires:
            - terraform-apply

  delete-development-environment:
    when: << pipeline.parameters.GHA_Action >>
    jobs:
      - terraform-destroy
